import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase';
import { makePayload } from '@/lib/hmac';
import QRCode from 'qrcode';
// Note: Canvas and JsBarcode removed for simpler deployment
import { z } from 'zod';

// Dynamic import for pdfmake to avoid build issues
let PdfMake: any;
try {
  PdfMake = require('pdfmake/build/pdfmake');
  const PdfFonts = require('pdfmake/build/vfs_fonts');
  if (PdfFonts && PdfFonts.pdfMake) {
    PdfMake.vfs = PdfFonts.pdfMake.vfs;
  }
} catch (error) {
  console.error('Failed to load pdfmake fonts:', error);
}

// PDF 생성 요청 스키마
const pdfGenerateSchema = z.object({
  voucher_ids: z.array(z.string().uuid()).min(1).max(100),
  design_template_id: z.string().uuid(),
  format: z.enum(['a4', 'mobile']).optional().default('a4')
});

// QR 코드 생성
async function generateQRCode(data: string): Promise<string> {
  try {
    return await QRCode.toDataURL(data, {
      width: 200,
      margin: 1,
      color: {
        dark: '#000000',
        light: '#FFFFFF'
      }
    });
  } catch (error) {
    console.error('QR 코드 생성 오류:', error);
    throw error;
  }
}

// 바코드 생성 (단순 텍스트 형태)
function generateBarcode(data: string): string {
  // Canvas 지원 없이 단순 텍스트로 반환
  return `|||${data}|||`;
}

// 필드 데이터 준비
function prepareFieldData(voucher: any): Record<string, string> {
  return {
    association: voucher.association || '',
    member_id: voucher.member_id || '',
    name: voucher.name || '',
    dob: voucher.dob || '',
    amount: voucher.amount ? `${voucher.amount.toLocaleString()}원` : '',
    serial_no: voucher.serial_no || ''
  };
}

// PDF 문서 생성
async function createPdfDocument(
  vouchers: any[], 
  designTemplate: any, 
  format: 'a4' | 'mobile'
) {
  const docDefinition: any = {
    pageSize: format === 'a4' ? 'A4' : { width: 400, height: 400 },
    pageMargins: [0, 0, 0, 0],
    content: []
  };

  const fieldPositions = format === 'a4' 
    ? designTemplate.a4_field_positions 
    : designTemplate.mobile_field_positions;
  
  const backgroundImage = format === 'a4' 
    ? designTemplate.a4_image_url 
    : designTemplate.mobile_image_url;

  for (let i = 0; i < vouchers.length; i++) {
    const voucher = vouchers[i];
    
    // 배경 이미지
    const pageContent: any = {
      stack: [
        {
          image: backgroundImage,
          width: format === 'a4' ? 595 : 400, // A4 width in points = 595
          height: format === 'a4' ? 842 : 400, // A4 height in points = 842
          absolutePosition: { x: 0, y: 0 }
        }
      ]
    };

    // 필드 데이터 준비
    const fieldData = prepareFieldData(voucher);

    // QR 코드 및 바코드 생성
    if (fieldPositions.qr_code) {
      try {
        const qrCodeData = makePayload(voucher.serial_no, voucher.issued_at);
        const qrCodeImage = await generateQRCode(qrCodeData);
        
        pageContent.stack.push({
          image: qrCodeImage,
          width: fieldPositions.qr_code.width || 40,
          height: fieldPositions.qr_code.height || 40,
          absolutePosition: { 
            x: fieldPositions.qr_code.x, 
            y: fieldPositions.qr_code.y 
          }
        });
      } catch (error) {
        console.error('QR 코드 생성 실패:', error);
      }
    }

    if (fieldPositions.barcode) {
      try {
        const barcodeImage = generateBarcode(voucher.serial_no);
        
        pageContent.stack.push({
          image: barcodeImage,
          width: fieldPositions.barcode.width || 120,
          height: fieldPositions.barcode.height || 30,
          absolutePosition: { 
            x: fieldPositions.barcode.x, 
            y: fieldPositions.barcode.y 
          }
        });
      } catch (error) {
        console.error('바코드 생성 실패:', error);
      }
    }

    // 텍스트 필드 추가
    Object.entries(fieldPositions).forEach(([fieldKey, position]: [string, any]) => {
      if (fieldKey === 'qr_code' || fieldKey === 'barcode') return;
      
      const value = fieldData[fieldKey];
      if (!value) return;

      pageContent.stack.push({
        text: value,
        absolutePosition: { x: position.x, y: position.y },
        fontSize: position.fontSize || designTemplate.default_font_size || 12,
        color: position.color || designTemplate.default_text_color || '#000000',
        bold: position.fontWeight === 'bold',
        alignment: position.textAlign || 'left',
        font: position.fontFamily || designTemplate.default_font_family || 'Helvetica'
      });
    });

    docDefinition.content.push(pageContent);

    // 새 페이지 추가 (마지막 페이지가 아닌 경우)
    if (i < vouchers.length - 1) {
      docDefinition.content.push({ pageBreak: 'after' });
    }
  }

  return docDefinition;
}

// POST: PDF 생성
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    console.log('PDF 생성 API 호출:', body);

    // 입력 검증
    const validation = pdfGenerateSchema.safeParse(body);
    if (!validation.success) {
      return NextResponse.json(
        {
          success: false,
          message: '입력 정보가 올바르지 않습니다.',
          errors: validation.error.errors
        },
        { status: 400 }
      );
    }

    const { voucher_ids, design_template_id, format } = validation.data;

    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!
    );

    // 교환권 데이터 조회
    const { data: vouchers, error: voucherError } = await supabase
      .from('vouchers')
      .select('*')
      .in('id', voucher_ids);

    if (voucherError) {
      console.error('교환권 조회 오류:', voucherError);
      return NextResponse.json(
        {
          success: false,
          message: '교환권 조회에 실패했습니다.'
        },
        { status: 500 }
      );
    }

    if (!vouchers || vouchers.length === 0) {
      return NextResponse.json(
        {
          success: false,
          message: '교환권을 찾을 수 없습니다.'
        },
        { status: 404 }
      );
    }

    // 디자인 템플릿 조회
    const { data: designTemplate, error: templateError } = await supabase
      .from('voucher_design_templates')
      .select('*')
      .eq('id', design_template_id)
      .eq('is_active', true)
      .single();

    if (templateError || !designTemplate) {
      console.error('디자인 템플릿 조회 오류:', templateError);
      return NextResponse.json(
        {
          success: false,
          message: '디자인 템플릿을 찾을 수 없습니다.'
        },
        { status: 404 }
      );
    }

    // PDF 문서 생성
    const docDefinition = await createPdfDocument(vouchers, designTemplate, format);

    // PDF 생성
    const pdfDoc = PdfMake.createPdf(docDefinition);
    
    return new Promise<NextResponse>((resolve) => {
      pdfDoc.getBuffer((buffer: Buffer) => {
        const response = new NextResponse(buffer as BodyInit, {
          status: 200,
          headers: {
            'Content-Type': 'application/pdf',
            'Content-Disposition': `attachment; filename="vouchers-${format}-${new Date().toISOString().slice(0, 10)}.pdf"`,
            'Cache-Control': 'no-cache'
          }
        });
        resolve(response);
      });
    });

  } catch (error) {
    console.error('PDF 생성 API 오류:', error);
    return NextResponse.json(
      {
        success: false,
        message: 'PDF 생성 중 오류가 발생했습니다.'
      },
      { status: 500 }
    );
  }
}

// OPTIONS 요청 처리 (CORS)
export async function OPTIONS(request: NextRequest) {
  return new NextResponse(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    },
  });
}